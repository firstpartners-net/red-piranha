<project name="Red Piranha" basedir="." default="build">

	<!-- This file allows the building of Red-Piranha Core from Source  -->

	<!-- Copyright (C) 2004-2020 Paul Browne, http://www.firstpartners.net 	-->
	<!-- Released under terms of the LGPL license						-->
	<!-- http://www.opensource.org/licenses/lgpl-license.php				-->

	<description>
      Ant Build file - compile, build, test , package the Red-Piranha project
    </description>


	<!-- General Variables -->
	<property name="application.title" value="Red Piranha" />
	<property name="main.class" value="net.firstpartners.ui.RedCommandLine" />

	<!--Extensions -->
	<property name="launch4j.dir" location="scripts/launch4j" />

	<!-- Define locations used in the build script -->
	<property name="name" value="red-piranha" />
	<property name="app.root" value="." />
	<property name="src.dir" value="src" />
	<property name="lib.root" value="war/WEB-INF" />

	<!-- Distri	b and deploy -->
	<property name="distrib.dir" value="dist" />
	<property name="deploy.dir" value="scripts/jetty/webapps" />

	<!-- For Testing -->
	<property name="testsrc.dir" value="test" />
	<property name="testreports.dir" value="junit-test-reports" />
	<property name="testhtml.dir" value="${testreports.dir}/html" />
	<property name="testlib.dir" value="${app.root}/testlib" />


	<!-- build wipes these dirs-->
	<property name="javadocs.dir" value="docs/javadocs" />
	<property name="build.dir" value="build" />
	<property name="testbuild.dir" value="testbuild" />
	<property name="distrib.dir" value="dist" />

	<!-- Define additional ant tasks -->
	<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${launch4j.dir}/launch4j.jar" />
	<taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpath="testlib/checkstyle-8.31-all.jar" />
	
	<!-- The Main classpath we use when compiling -->
	<path id="master-classpath">
		<fileset dir="${lib.root}/lib/">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>

	</path>

	<!-- A modified classpath we use when running tests -->
	<path id="test-classpath">

		<fileset dir="${testlib.dir}/">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>

		<!-- Include any additional files if required-->
	</path>


	<!-- Clean out old directories -->
	<target name="clean" description="Clean output dirs (build, docs, dist)">
		<delete dir="${build.dir}" />
		<delete dir="${testbuild.dir}" />
		<delete dir="${distrib.dir}" />
	</target>

	<!-- Compile Java Classes into build folder-->
	<target name="build" description="Compile main source tree java files into class files, generate build folder">
		<delete dir="${build.dir}" />
		<mkdir dir="${build.dir}" />
		<javac destdir="${build.dir}" debug="true" deprecation="false" optimize="false" failonerror="true">

			<!-- Source path-->
			<src path="${src.dir}" />

			<!-- Comment this out for production build-->
			<!-- Include mock objects and tests-->
			<src path="${testsrc.dir}" />

			<!-- Main Production Classpath-->
			<classpath refid="master-classpath" />

			<!-- Comment this out for production build-->
			<!-- Additional Classpath for test-->
			<classpath refid="test-classpath" />

		</javac>


		<copy todir="${build.dir}" preservelastmodified="true">
			<fileset dir="${src.dir}">
				<include name="**/.*" />
				<exclude name="*.java" />
			</fileset>
		</copy>
	</target>

	<!-- Run the Junit tests in the application -->
	<target name="tests" depends="build" description="run Junit tests">
		<property name="rp.root" value="${testreports.dir}" />
		<delete dir="${testbuild.dir}" />
		<mkdir dir="${testbuild.dir}" />
		<!--delete dir="${testreports.dir}"/-->
		<mkdir dir="${testreports.dir}" />
		<mkdir dir="${testreports.dir}/logs" />
		<mkdir dir="${testhtml.dir}" />
		<javac srcdir="${testsrc.dir}" destdir="${testbuild.dir}" deprecation="true">
			<classpath path="${build.dir}" />
			<classpath refid="master-classpath" />
			<classpath path="${app.root}/testlib/*.jar" />
			<classpath refid="test-classpath" />
		</javac>

		<!-- copy the test configuration -->
		<copy todir="${testbuild.dir}" preservelastmodified="true">
			<fileset dir="${testsrc.dir}">
				<include name="*" />
				<include name="*.xml" />
				<include name="*.properties" />
				<include name="**/.*" />
			</fileset>
		</copy>

		<junit printsummary="true" fork="yes">
			<formatter type="xml" />
			<formatter type="plain" usefile="false" />

			<batchtest fork="yes" todir="${testreports.dir}">
				<fileset dir="${testsrc.dir}">
					<include name="**/*Test*.java" />
					<exclude name="**/AllTests.java" />
				</fileset>
			</batchtest>


			<classpath path="${build.dir}" />
			<classpath path="${src.dir}" />
			<classpath path="${testbuild.dir}" />
			<classpath path="${testsrc.dir}" />
			<classpath refid="master-classpath" />
			<classpath refid="test-classpath" />
		</junit>

		<!--
	<junitreport todir="${testhtml.dir}">
		<fileset dir="${testreports.dir}">
			<include name="TEST-*.xml" />
		</fileset>
		<report format="frames" todir="${testhtml.dir}" />
	</junitreport> -->
	</target>


	<!-- Create Jar file-->
	<target name="jar" depends="build" description="Create the Jar file for distribution">

		<jar jarfile="${distrib.dir}/${name}.jar" compress="true">

			<manifest>
				<attribute name="Main-Class" value="${main.class}" />
			</manifest>

			<fileset dir="${build.dir}">
				<include name="**" />
			</fileset>
		</jar>



	</target>



	<!-- Create War file for  distribution-->
	<target name="war" depends="jar" description="Create the War file for distribution">

		<!-- copy in Red Piranha jars to WEB-INF lib for later packaign-->
		<copy file="${distrib.dir}/${name}.jar" tofile="${lib.root}/lib/${name}.jar" />

		<war warfile="${distrib.dir}/${name}.war" basedir="war" needxmlfile="false" webxml="${lib.root}/web.xml">

			<lib dir="${lib.root}/lib/" />

		</war>

	</target>


	<!-- Deploy War to Jetty-->
	<target name="deploy-jetty" depends="war" description="Deploy the War file to local Jetty">

		<copy file="${distrib.dir}/${name}.war" tofile="${deploy.dir}/${name}.war" />

	</target>

	<!-- Create a standalone exe file with all needed classes -->
	<target name="jar-single" depends="jar" description="create a single jar with all required libs">


		<!-- Change the value of this property to be the name of your JAR,
		             minus the .jar extension. It should not have spaces.
		             <property name="store.jar.name" value="MyJarName"/>
		        -->
		<property name="store.jar.name" value="${name}-single" />
		<property name="tmp.dir" value="${distrib.dir}/tmp" />
		<property name="store.jar" value="${tmp.dir}/${store.jar.name}.jar" />

		<echo message="Packaging ${application.title} into a single JAR at ${store.jar}" />

		<!-- clear out any tmp dir hanging around -->
		<delete dir="${tmp.dir}" />
		<mkdir dir="${tmp.dir}" />

		<!-- do the actual combo-->
		<jar destfile="${tmp.dir}/temp_final.jar" filesetmanifest="skip">
			<zipgroupfileset dir="dist" includes="*.jar" />
			<zipgroupfileset dir="${lib.root}/lib" includes="*.jar" />
			<manifest>
				<attribute name="Main-Class" value="${main.class}" />
			</manifest>
		</jar>

		<zip destfile="${store.jar}">
			<zipfileset src="${tmp.dir}/temp_final.jar" excludes="META-INF/*.SF, META-INF/*.DSA, META-INF/*.RSA" />
		</zip>

		<!-- move to distrib delte temp -->
		<copy file="${store.jar}" tofile="${distrib.dir}/${store.jar.name}.jar" />
		<delete dir="${tmp.dir}" />


	</target>


	<!-- Uses Launch4j to create a standalone exe file with all needed jars -->
	<target name="exe" depends="jar-single" description="create standalone exe">

		<!-- Delete any previous exe-->
		<delete file="${distrib.dir}/red-piranha.exe" />

		<!-- call the launch4j to wrap as standalone exe-->
		<launch4j configFile="launch4j.xml" />

		<!-- Copy the debug batch file into dist-->
		<copy file="${src.dir}/red-piranha-debug.bat" tofile="${distrib.dir}/red-piranha-debug.bat" />


	</target>


	<!-- Create Javadoc for application-->
	<target name="javadoc" description="Create complete Javadoc documentation">
		<delete dir="${javadocs.dir}" />
		<mkdir dir="${javadocs.dir}" />
		<javadoc sourcepath="${src.dir}" destdir="${javadocs.dir}" windowtitle="Tiles Example" author="true" version="true" use="true" packagenames="*">
			<doctitle>
				<![CDATA[<h1>Red-Piranha - Java Power tools for Excel</h1>]]>
			</doctitle>
		<bottom>
			<![CDATA[<i>FirstPartners.net 2010-2020.</i>]]>
			</bottom>
	<classpath refid="master-classpath" />

</javadoc>
</target>

<!-- check Javadoc for application-->
<target name="check-javadoc" description="Check Javadoc documentation">


<checkstyle config="/test/checkstyle_checks.xml" failureProperty="checkstyle.failure"
    failOnViolation="false">
	<fileset dir="${src.dir}" includes="**/*.java" />
	<formatter type="xml" tofile="checkstyle_report.xml"/>
	<path id="test-classpath"/>
</checkstyle>

	<style in="checkstyle_report.xml" out="checkstyle_report.html" style="checkstyle.xsl" />

</target>



</project>